{"version":3,"sources":["components/squad/squad.component.jsx","components/squad-list/squad-list.component.jsx","components/search-field/search-field.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Squad","props","className","key","player","shirtNumber","name","alt","src","imgSrc","position","SquadList","players","map","SearchField","type","placeholder","onChange","handleChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","squad","this","searchedPlayers","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+VAGaA,G,MAAQ,SAACC,GAClB,OACI,yBAAKC,UAAU,mBACX,wBAAIC,IAAMF,EAAMG,OAAOC,aAAgBJ,EAAMG,OAAOE,MACpD,yBAAKC,IAAI,SAASC,IAAMP,EAAMG,OAAOK,SACrC,4BAAMR,EAAMG,OAAOM,aCJlBC,G,MAAY,SAACV,GACtB,OACI,yBAAKC,UAAU,cAEPD,EAAMW,QAAQC,IAAI,SAAAT,GAAM,OACpB,kBAAC,EAAD,CAAOD,IAAMC,EAAOC,YAAcD,OAASA,SCNlDU,G,MAAc,SAACb,GAAD,OACvB,2BAAOC,UAAU,SAASa,KAAK,SAASC,YAAcf,EAAMe,YACpDC,SAAWhB,EAAMiB,iBCuCdC,G,kBArCb,aAAe,IAAD,8BACZ,+CAgBFD,aAAe,SAAAE,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAftC,EAAKC,MAAQ,CACXb,QAAS,GACTU,YAAa,IALH,E,iFASO,IAAD,OAClBI,MAAM,iFACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJ,EAAKT,SAAU,CAAET,QAASkB,Q,+BAQtB,IAAD,EAC0BC,KAAKN,MAA9Bb,EADD,EACCA,QAASU,EADV,EACUA,YAEXU,EAAkBpB,EAAQqB,OAAO,SAAA7B,GAAM,OAC3CA,EAAOE,KAAK4B,cAAcC,SAASb,EAAYY,iBAEjD,OACE,yBAAKhC,UAAU,OACb,6CACA,kBAAC,EAAD,CAAac,YAAY,iBAAiBE,aAAiBa,KAAKb,eAChE,kBAAC,EAAD,CAAWN,QAAUoB,S,GAhCXI,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.9c7182ff.chunk.js","sourcesContent":["import React from 'react';\nimport './squad.styles.css';\n\nexport const Squad = (props) => {\n    return (\n        <div className=\"squad-container\">\n            <h1 key={ props.player.shirtNumber }>{ props.player.name }</h1>\n            <img alt=\"player\" src={ props.player.imgSrc }></img>\n            <h3>{ props.player.position }</h3>\n        </div>\n    );\n}","import React from 'react';\nimport { Squad } from '../squad/squad.component';\nimport './squad-list.styles.css'\n\nexport const SquadList = (props) => {\n    return (\n        <div className=\"squad-list\">\n            {\n                props.players.map(player => (\n                    <Squad key={ player.shirtNumber } player={ player }/>\n                ))\n            }\n        </div>\n    );\n}","import React from 'react';\nimport './search-field.styles.css';\n\nexport const SearchField = (props) => (\n    <input className=\"search\" type=\"search\" placeholder={ props.placeholder } \n            onChange={ props.handleChange }>\n    </input>\n);","import React from 'react';\nimport { Component } from 'react';\nimport { SquadList } from './components/squad-list/squad-list.component';\nimport { SearchField } from './components/search-field/search-field.component';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      players: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://my-json-server.typicode.com/karthickram286/chelsea-players-json/squad')\n      .then(response => response.json())\n      .then(squad => {\n        this.setState( { players: squad } )\n      });\n  }\n\n  handleChange = e => {\n    this.setState({ searchField: e.target.value })\n  }\n\n  render() {\n    const { players, searchField } = this.state;\n\n    const searchedPlayers = players.filter(player => \n      player.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Chelsea Squad</h1>\n        <SearchField placeholder='search players' handleChange = { this.handleChange }/>\n        <SquadList players={ searchedPlayers }/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}